[
  {
    "objectID": "rasterGet.html",
    "href": "rasterGet.html",
    "title": "Get raster data from BeeSpatial",
    "section": "",
    "text": "This pages shows how to use BeeSpatial to download the cropland data layer (CDL) raster for Centre County, Pennsylvania for the year 2021.",
    "crumbs": [
      "Raster data",
      "Get raster data from BeeSpatial"
    ]
  },
  {
    "objectID": "introgis.html",
    "href": "introgis.html",
    "title": "Necessary concepts and R packages",
    "section": "",
    "text": "This page serves as a brief overview of the GIS concepts and packages to get you up and running with the R-based modules in this tutorial. For more in-depth introduction GIS, you may want to look elsewhere on the web.",
    "crumbs": [
      "Getting Started",
      "Necessary concepts and R packages"
    ]
  },
  {
    "objectID": "introgis.html#terms",
    "href": "introgis.html#terms",
    "title": "Necessary concepts and R packages",
    "section": "Terms",
    "text": "Terms\n\nraster: A form of geographic data that represents the landscape as a grid of cells. Grid values can be continuous values, signifying things like elevation, temperature, or spectral information (e.g. color) in a satellite image; or categorical values, signifying thematic classes like land cover.\nvector: Another form of geographic data that represents specific features on the landscape composed of discrete geometric locations that consist of x and y values. These can be points, lines, or polygons.\nCropland Data Layer (CDL): A set of raster datasets produced by the USDA National Agricultural Statistics (NASS) Service and Agricultural Research Service (ARS) that represents annual crop-specific land cover produced from satellite imagery and ground reference data.",
    "crumbs": [
      "Getting Started",
      "Necessary concepts and R packages"
    ]
  },
  {
    "objectID": "introgis.html#load-necessary-packages",
    "href": "introgis.html#load-necessary-packages",
    "title": "Necessary concepts and R packages",
    "section": "Load necessary packages",
    "text": "Load necessary packages\nThere are a number of packages in R that are helpful in working with spatial data. For this workshop we will be using sf and terra. For data wrangling and visualizations we will use dplyr, ggplot2 and tidyterra.\n\n\n\nName\nDescription\nLink\n\n\n\n\ndplyr\nPackage that provides a ‘grammar’ of data manipulation in R\nhttps://dplyr.tidyverse.org/\n\n\nggplot2\nPackage that provides a system for declaratively creating graphics\nhttps://ggplot2.tidyverse.org/\n\n\nsf\nPackage for manipulating 2-D geographic vector data\nhttps://r-spatial.github.io/sf/\n\n\nterra\nPackage for spatial data analysis\nhttps://rspatial.github.io/terra/\n\n\ntidyterra\nPackage for integrating objects from terra with the dplyr and ggplot2 packages\nhttps://dieghernan.github.io/tidyterra/\n\n\n\nBecause some spatial functions have the same names as dplyr functions it is helpful to load the spatial packages last. We can also use the :: to specify the package for function calls.\nUnhash (remove the preceding #) and use install.packages for any packages your may not already have installed\n\n# install.packages(\"dplyr\", dependencies = TRUE)\n# install.packages(\"ggplot2\", dependencies = TRUE)\n# install.packages(\"sf\", dependencies = TRUE)\n# install.packages(\"terra\", dependencies = TRUE)\n# install.packages(\"tidyterra\", dependencies = TRUE)\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyterra)",
    "crumbs": [
      "Getting Started",
      "Necessary concepts and R packages"
    ]
  },
  {
    "objectID": "vectorWork.html",
    "href": "vectorWork.html",
    "title": "Work with vector data",
    "section": "",
    "text": "Here are some geoprocessing examples for working with the cropland data layer data from BeeSpatial. We show how to visualize the raster and reclassify land cover values into forage index values in spring.\nFirst, load the necessary packages. More info on these packages and their installation can be found here.\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyterra)",
    "crumbs": [
      "Vector data",
      "Work with vector data"
    ]
  },
  {
    "objectID": "rasterViz.html",
    "href": "rasterViz.html",
    "title": "Visualizing rasters",
    "section": "",
    "text": "Here we show how to visualize the cropland data layer (CDL) raster.\nFirst, load the necessary packages. More info on these packages and their installation can be found here.\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyterra)",
    "crumbs": [
      "Raster data",
      "Visualizing rasters"
    ]
  },
  {
    "objectID": "rasterViz.html#read-in-raster-data",
    "href": "rasterViz.html#read-in-raster-data",
    "title": "Visualizing rasters",
    "section": "Read in raster data",
    "text": "Read in raster data\nDownloaded data from BeeSpatial is packaged as a zipped file ending in .zip. Opening this file, you should find a .tif raster file:\nCDL_2021_FIPS_42027.tif\nThis filename indicates the data type, in this case CDL, the year and the FIPS code that corresponds to the county you selected.\nThe first thing we will do is use the rast() function to read the .tif file into R as a SpatRaster object. For the code below to work, you must use your own filepath for the .tif file.\n\ncentre_cdl &lt;- rast(\"data/CDL_2021_FIPS_42027.tif\")    # change the filepath to reflect where you've stored the data\n\ncentre_cdl\n\nclass       : SpatRaster \nsize        : 2147, 3167, 1  (nrow, ncol, nlyr)\nresolution  : 30, 30  (x, y)\nextent      : 1467225, 1562235, 2105925, 2170335  (xmin, xmax, ymin, ymax)\ncoord. ref. : NAD83 / Conus Albers (EPSG:5070) \nsource      : CDL_2021_FIPS_42027.tif \nname        : Class_Names \nmin value   :           1 \nmax value   :         254 \n\n\nAn important attribute of spatial data are their Coordinate Reference System or CRS. This information tells us what model of the earth (ex WGS84 or NAD83) is being referenced as well as the units of the coordinates such as decimal degrees.\nRasters downloaded from BeeSpatial inherit their CRS from the raster they were originally extracted from.\nLet’s view the CRS for your county cdl:\n\ncrs(centre_cdl)\n\n[1] \"PROJCRS[\\\"NAD83 / Conus Albers\\\",\\n    BASEGEOGCRS[\\\"NAD83\\\",\\n        DATUM[\\\"North American Datum 1983\\\",\\n            ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",4269]],\\n    CONVERSION[\\\"Conus Albers\\\",\\n        METHOD[\\\"Albers Equal Area\\\",\\n            ID[\\\"EPSG\\\",9822]],\\n        PARAMETER[\\\"Latitude of false origin\\\",23,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8821]],\\n        PARAMETER[\\\"Longitude of false origin\\\",-96,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8822]],\\n        PARAMETER[\\\"Latitude of 1st standard parallel\\\",29.5,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8823]],\\n        PARAMETER[\\\"Latitude of 2nd standard parallel\\\",45.5,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8824]],\\n        PARAMETER[\\\"Easting at false origin\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8826]],\\n        PARAMETER[\\\"Northing at false origin\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8827]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"easting (X)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"northing (Y)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"Data analysis and small scale data presentation for contiguous lower 48 states.\\\"],\\n        AREA[\\\"United States (USA) - CONUS onshore - Alabama; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming.\\\"],\\n        BBOX[24.41,-124.79,49.38,-66.91]],\\n    ID[\\\"EPSG\\\",5070]]\"\n\n\nWe can see that our CDL raster is using the North American Datum of 1983 as its model for the shape of the earth. Our two-dimensional projection model of earth’s 3d surface is Alber’s Equal Area and the units of our coordinates are in meters.",
    "crumbs": [
      "Raster data",
      "Visualizing rasters"
    ]
  },
  {
    "objectID": "rasterViz.html#visualize-raster-data",
    "href": "rasterViz.html#visualize-raster-data",
    "title": "Visualizing rasters",
    "section": "Visualize raster data",
    "text": "Visualize raster data\nWe can visualize our county CDl raster by using the base R plot function:\n\nplot(centre_cdl)\n\n\n\n\n\n\n\n\nWe’ll talk about other plotting options such as using the packages ggplot2 and tidyterra a little later.\n\nDisplay CDL class names\nRight now we are viewing the raw numeric codes of the CDL. These codes mean something: the crop land cover class. We can tell terra what these codes mean so that it will show the land cover class names rather than the raw values. The information for these land cover values (along with their colors) are stored in a color table downloadable here.\n\ncdl_colormap &lt;- read.csv(\"data/cdl_colormap.csv\")   # read in the table from your download location\n\nhead(cdl_colormap)  # use `head()` to take a look at the first 5 rows of cdl_colormap\n\n  value red green blue alpha class_name\n1     0   0     0    0   255 Background\n2     1 255   211    0   255       Corn\n3     2 255    38   38   255     Cotton\n4     3   0   168  228   255       Rice\n5     4 255   158   11   255    Sorghum\n6     5  38   112    0   255   Soybeans\n\n\nWe set the levels of the raster to the land cover class names using the relevant elements of cdl_colormap: ‘value’ (column 1) and ‘class_name’ (column 6).\n\nlevels(centre_cdl) &lt;- cdl_colormap[,c(1,6)]\n\nplot(centre_cdl)  # plot, as above, but now R knows what the numeric values mean\n\n\n\n\n\n\n\n\nThen we can recolor the classes to match the traditional NASS CDL style.\nThis color information is stored in columns 2-5 of the cdl_colormap table, representing red, green, blue, and alpha (transparency) values. We use the function coltab to supply the color map with this information in columns that are in this specific order, plus the corresponding (raw) raster value as the first column (they are already set up as the first 5 columns of cdl_colormap)\n\ncoltab(centre_cdl) &lt;- cdl_colormap[,1:5]\n\nplot(centre_cdl)  # plot, as above, but now R knows what the numeric values mean and assigns colors\n\n\n\n\n\n\n\n\nLet’s look at some customization options. To do this, we’ll be using the ggplot2 tidyterra packages. ggplot2 plots a little differently from base R. Data elements are layered on top of a base plot using + signs and functions that start with geom_. Here, we’re starting with a blank base plot and adding the spatraster object using geom_spatraster().\n\nggplot() +  # blank base plot\n  geom_spatraster(data = centre_cdl, aes(fill = class_name))   # add the spatraster layer\n\n&lt;SpatRaster&gt; resampled to 500797 cells.\n\n\n\n\n\n\n\n\n\nThe legend is now quite large but can be easily modified using ggplot2 theme functions.\n\nggplot() +\n  geom_spatraster(data = centre_cdl, aes(fill = class_name)) +\n  theme(legend.title = element_text(size = 7), # make legend title smaller\n        legend.text = element_text(size = 7), # make legend text smaller\n        legend.key.size = unit(0.25, 'cm'), #make legend color keys smaller\n        legend.position=\"bottom\") # move legend to the bottom of the plot\n\n&lt;SpatRaster&gt; resampled to 500797 cells.",
    "crumbs": [
      "Raster data",
      "Visualizing rasters"
    ]
  },
  {
    "objectID": "rasterViz.html#write-out-raster-files",
    "href": "rasterViz.html#write-out-raster-files",
    "title": "Visualizing rasters",
    "section": "Write out raster files",
    "text": "Write out raster files\nWe can save our raster files as a .tif using writeRaster. For the CDL raster we will save the data in “INT1U” format which will also save the class names and color table.\n\nwriteRaster(centre_cdl, \"data/centre_county_cdl_2021.tif\", overwrite=TRUE, datatype=\"INT1U\")",
    "crumbs": [
      "Raster data",
      "Visualizing rasters"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the BeeSpatial Tutorial",
    "section": "",
    "text": "BeeSpatial is a companion web application to Beescape. It provides researchers access to pollinator habitat quality indices that assess nesting suitability, floral resources, toxicity of potentially applied insecticides, and economic value of pollination. It also hosts base data layers on land cover and climate. Data are available from 2008 to the most recent available year.\nBeeSpatial can be used to query data commonly used when modeling the environemental drivers of species’ or commmunity responses.\nBeeSpatial allows users to extract:\n\nClimate data: monthly precipitation, min, and max temperature from PRISM\nCrop land covers: from the NASS CropLand Data Layer\nBeescape indices: spring forage, summer forage, fall forage, nesting, and pesticides",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "rasterReclass.html",
    "href": "rasterReclass.html",
    "title": "Reclassify CDL",
    "section": "",
    "text": "Here are some geoprocessing examples for reclassifying the cropland data layer (CDL) data from BeeSpatial. BeeSpatial provides forage, nesting, and insecticide rasters as buffered summaries using distance-weighted means of 1, 3, and 5km radius buffers. This means that each pixel of the raster represents the distance-weighted mean of the index values within the corresponding buffer radius.\nHowever, if you only need forage, nesting, or insecticide values themselves instead of buffer summaries, you can obtain this through reclassifying the CDL. This tutorial shows how to do that.\nFirst, load the necessary packages. More info on these packages and their installation can be found here.\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyterra)\nRead in the CDL data downloaded from BeeSpatial.\ncentre_cdl &lt;- rast(\"data/CDL_2021_FIPS_42027.tif\")    # change the filepath to reflect where you've stored the data",
    "crumbs": [
      "Raster data",
      "Reclassify CDL"
    ]
  },
  {
    "objectID": "rasterReclass.html#inspect-raster-values",
    "href": "rasterReclass.html#inspect-raster-values",
    "title": "Reclassify CDL",
    "section": "Inspect raster values",
    "text": "Inspect raster values\nUsing the values() function we can directly inspect the spring floral values for Centre County. We will set the argument na.rm=TRUE so that all the empty cells (outside of the county) are not included. The result of values() shows individual grid cell values. In this case we will only extract the first 20 grid cell values.\n\nvalues(centre_floral_sp, na.rm=TRUE)[1:20]   # just the first 20 cells\n\n [1] 0.5848480 0.0000000 0.6965277 0.5848480 0.0000000 0.0000000 0.6965277\n [8] 0.5848480 0.0000000 0.0000000 0.6965277 0.6965277 0.6965277 0.0000000\n[15] 0.0000000 0.0000000 0.6965277 0.6965277 0.5848480 0.0000000\n\n\nWe can also use some basic summary functions to view the distribution of floral resource values for the county.\n\nsummary(values(centre_floral_sp, na.rm=TRUE))    # make a summary with the quartiles and the mean\n\n  Class_Names    \n Min.   :0.0000  \n 1st Qu.:0.4558  \n Median :0.6965  \n Mean   :0.5813  \n 3rd Qu.:0.6965  \n Max.   :0.6993  \n\nhist(values(centre_floral_sp, na.rm=TRUE))       # make a basic histogram of values",
    "crumbs": [
      "Raster data",
      "Reclassify CDL"
    ]
  },
  {
    "objectID": "rasterReclass.html#write-out-raster-files",
    "href": "rasterReclass.html#write-out-raster-files",
    "title": "Reclassify CDL",
    "section": "Write out raster files",
    "text": "Write out raster files\nWe can save our raster files as a .tif using writeRaster.\n\nwriteRaster(centre_floral_sp, \"data/centre_county_springfloral_2021.tif\", overwrite=TRUE)",
    "crumbs": [
      "Raster data",
      "Reclassify CDL"
    ]
  }
]